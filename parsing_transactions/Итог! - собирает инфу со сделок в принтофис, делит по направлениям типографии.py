import time
import re
import pandas as pd
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
USERNAME = "ansa174"
PASSWORD = "Yrx7d)73!"
STATUS_IDS = ["17541", "26873"]  # –ó–∞–≤–µ—Ä—à–µ–Ω–æ, –ì–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
TOTAL_PAGES = 30
OUTPUT_FILE = "–†–µ–∑—É–ª—å—Ç–∞—Ç_—Å–¥–µ–ª–æ–∫.xlsx"
# ========================


def parse_number(text):
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é, –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float."""
    cleaned = re.sub(r'[^\d\.,-]', '', text).replace(',', '.')
    try:
        return float(cleaned)
    except:
        return 0.0


def extract_date(date_str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –∏–ª–∏ NaT"""
    m = re.search(r'(\d{2}\.\d{2}\.\d{4})', str(date_str))
    if m:
        try:
            return datetime.strptime(m.group(1), '%d.%m.%Y')
        except:
            return pd.NaT
    return pd.NaT

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium
def init_driver():
    opts = webdriver.ChromeOptions()
    opts.add_argument("--start-maximized")
    return webdriver.Chrome(
        service=Service(ChromeDriverManager().install()),
        options=opts
    )

try:
    driver = init_driver()

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    driver.get("https://printoffice24.com/login")
    time.sleep(2)
    driver.find_element(By.NAME, "username").send_keys(USERNAME)
    driver.find_element(By.NAME, "password").send_keys(PASSWORD, Keys.RETURN)
    time.sleep(5)

    # 2) –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
    WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, '//button[@data-id="deal_status_select"]'))
    ).click()
    time.sleep(1)
    for opt in driver.find_elements(By.CSS_SELECTOR, '.deal_list_select option[selected]'):
        driver.execute_script("arguments[0].selected = false;", opt)
    for opt in driver.find_elements(By.XPATH, '//select[@id="deal_status_select"]/option'):
        if opt.get_attribute("value") in STATUS_IDS:
            driver.execute_script("arguments[0].selected = true;", opt)
    driver.execute_script("$('#deal_status_select').selectpicker('refresh');")
    time.sleep(1)
    driver.find_element(By.CSS_SELECTOR, "h3.panel-title").click()
    time.sleep(3)

    # 3) –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ + –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    deal_end_dates = {}
    deal_ids = []
    for page in range(1, TOTAL_PAGES + 1):
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "deal_list_table"))
        )
        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.END)
        time.sleep(2)
        rows = driver.find_elements(By.CSS_SELECTOR, "#deal_list_table tbody tr")
        for row in rows:
            try:
                did = row.find_element(By.CSS_SELECTOR, "td.clmn_num").get_attribute("data-id")
                ed = row.find_element(By.CSS_SELECTOR, "td.clmn_end_date").text.strip().replace("\n", " ")
                if did and did not in deal_ids:
                    deal_ids.append(did)
                    deal_end_dates[did] = ed
            except:
                pass
        if page < TOTAL_PAGES:
            btn = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, f'//a[@class="page_pagin" and normalize-space()="{page+1}"]'))
            )
            first = rows[0]
            btn.click()
            WebDriverWait(driver, 10).until(EC.staleness_of(first))
            time.sleep(2)

    links = [f"https://printoffice24.com/editDeal/{did}" for did in deal_ids]

    # 4) –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    all_rows = []
    for url in links:
        print("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é", url)
        driver.get(url)
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "tr.deal-element-row"))
        )
        time.sleep(1)

        deal_id = url.rsplit("/", 1)[-1]
        try:
            deal_number = driver.find_element(By.ID, "page_title").get_attribute("value").split("‚Ññ")[-1].strip()
        except:
            deal_number = ""
        try:
            cb = driver.find_element(By.ID, "div_client_info")
            client_name = cb.find_element(
                By.XPATH,
                './/strong[contains(text(),"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")]/following-sibling::br/following-sibling::span'
            ).text.strip()
        except:
            client_name = ""

        temp = []
        deal_ready = None
        els = driver.find_elements(By.CSS_SELECTOR, "tr.deal-element-row")
        for el in els:
            full = el.find_element(By.CLASS_NAME, "deal-element-name").text.strip()
            if " / " in full:
                name, ptype = full.split(" / ", 1)
            else:
                name, ptype = full, ""
            qty = el.find_elements(By.XPATH, './/td[@class="text-right"]')[1].text.replace('\xa0','').strip()
            rev = parse_number(el.find_elements(By.XPATH, './/td[@class="text-right"]')[5].text)
            try:
                cost = parse_number(el.find_element(By.XPATH, './/span[contains(@class,"hidden-values")]').get_attribute("data-val"))
            except:
                cost = 0.0
            profit = rev - cost
            margin = round(profit / rev * 100, 2) if rev else 0.0

            try:
                desc = el.find_element(By.CLASS_NAME, "deal-elm-description").text
                rd = next((ln.split("–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:")[1].strip() for ln in desc.split("\n") if "–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:" in ln), "")
            except:
                rd = ""
            if rd:
                deal_ready = rd

            temp.append({
                "–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏": deal_number,
                "–ö–ª–∏–µ–Ω—Ç": client_name,
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                "–í–∏–¥ –ø–µ—á–∞—Ç–∏": ptype,
                "–í—ã—Ä—É—á–∫–∞": rev,
                "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": cost,
                "–ü—Ä–∏–±—ã–ª—å": profit,
                "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)": margin,
                "–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏": rd or deal_ready or deal_end_dates.get(deal_id, "")
            })
        all_rows.extend(temp)

    df = pd.DataFrame(all_rows)

    # 5) –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø—É –ø–µ—á–∞—Ç–∏
    def classify(pt):
        if pt == "–£–§ –ø–µ—á–∞—Ç—å": return "–£–§ –ø–µ—á–∞—Ç—å"
        if pt == "–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å": return "–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å"
        return "–ü–µ—Ä–µ–∑–∞–∫–∞–∑"

    df["–ö–ª–∞—Å—Å –ø–µ—á–∞—Ç–∏"] = df["–í–∏–¥ –ø–µ—á–∞—Ç–∏"].apply(classify)

    summary = df.groupby("–ö–ª–∞—Å—Å –ø–µ—á–∞—Ç–∏").agg({
        "–í—ã—Ä—É—á–∫–∞": "sum",
        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": "sum"
    }).reset_index()
    summary["–ü—Ä–∏–±—ã–ª—å"] = summary["–í—ã—Ä—É—á–∫–∞"] - summary["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"]
    summary["–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)"] = summary.apply(
        lambda x: round(x["–ü—Ä–∏–±—ã–ª—å"] / x["–í—ã—Ä—É—á–∫–∞"] * 100, 2) if x["–í—ã—Ä—É—á–∫–∞"] else 0,
        axis=1
    )

    # 6) –°–≤–æ–¥–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–µ—á–∞—Ç–∏
    df["ParsedDate"] = df["–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"].apply(extract_date)
    df["–ú–µ—Å—è—Ü"] = df["ParsedDate"].dt.to_period('M').dt.to_timestamp()

    monthly_summary = df.groupby(["–ú–µ—Å—è—Ü", "–ö–ª–∞—Å—Å –ø–µ—á–∞—Ç–∏"]).agg(
        –í—ã—Ä—É—á–∫–∞=('–í—ã—Ä—É—á–∫–∞', 'sum'),
        –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å=('–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'sum')
    ).reset_index()
    monthly_summary['–ü—Ä–∏–±—ã–ª—å'] = monthly_summary['–í—ã—Ä—É—á–∫–∞'] - monthly_summary['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']
    monthly_summary['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (
        monthly_summary['–ü—Ä–∏–±—ã–ª—å'] / monthly_summary['–í—ã—Ä—É—á–∫–∞'] * 100
    ).round(2)

    # 7) –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏
    with pd.ExcelWriter(OUTPUT_FILE, engine="xlsxwriter") as writer:
        df.to_excel(writer, sheet_name="–î–∞–Ω–Ω—ã–µ –ø–æ —Å–¥–µ–ª–∫–∞–º", index=False)
        summary.to_excel(writer, sheet_name="–ü–æ —Ç–∏–ø—É –ø–µ—á–∞—Ç–∏", index=False)
        monthly_summary.to_excel(writer, sheet_name="–ü–æ –º–µ—Å—è—Ü–∞–º", index=False)

    print(f"‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî ¬´{OUTPUT_FILE}¬ª")

finally:
    driver.quit()
